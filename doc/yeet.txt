==============================================================================
Table of Contents                                                    *yeet.nvim*

SETUP ····························································· |yeet-setup|
USER COMMAND ···················································· |yeet-command|
API ····································································· |yeet|
CONF ······························································· |yeet-conf|

==============================================================================
SETUP                                                               *yeet-setup*

Options                                                           *yeet.Options*

    Fields: ~
        {yeet_and_run?}                  (boolean)            Execute command immediately.
        {clear_before_yeet?}             (boolean)            Clear buffer before execution.
        {interrupt_before_yeet?}         (boolean)            Hit C-c before execution.
        {notify_on_success?}             (boolean)            Print success notifications.
        {warn_tmux_not_running?}         (boolean)            Print warning message if tmux is not up.
        {retry_last_target_on_failure?}  (boolean)            Retries last target in case of failure. This only works for "new buffer term", "new tmux pane", "new tmux window"
        {hide_term_buffers?}             (boolean)            Hide neovim terminal buffers in `yeet.select_target`
        {use_cache_file?}                (boolean)            Use cache-file for persisting commands.
        {cache?}                         (fun():string)       Resolver for cache file.
        {cache_window_opts?}             (table|fun():table)  win_config passed to |nvim_open_win()|

    See: ~
        |standard-path|
        |uv.cwd|
        |vim.api.keyset.win_config|


Default cache solution is to create a cwd-specific file in
stdpath("cache") .. "/yeet/". Modify cache file location with custom cache-function.
Example of using a file named ".yeet" in project root:
>lua
   {
     cache = function()
       -- project local cache, maybe add to global .gitignore for commit hygiene
       return ".yeet"
     end
   }
<
Keep the builtin naming scheme for cache files, but in different location:

>lua
   {
     cache = function()
       return require("yeet.conf").cachepath("~/some/dir")
     end
   }
<

M.setup({opts?})                                                    *yeet.setup*
    Apply user config and register |yeet-command|.

    Parameters: ~
        {opts?}  (Options)  Custom settings.


==============================================================================
USER COMMAND                                                      *yeet-command*

:Yeet <subcommand?>

     Subcommands:
         select_target       => |yeet.select_target|
         execute             => |yeet.execute|
         toggle_post_write   => |yeet.toggle_post_write|
         set_cmd             => |yeet.set_cmd|
         list_cmd            => |yeet.list_cmd|
         execute_selection   => |yeet.execute_selection|
         setqflist           => |yeet.setqflist|

Yeet is a wrapper for |yeet| api mostly for trying out the api functionality
and for those calls that are not needed often enough to deserve a dedicated keymap.
No subcommand will default to |yeet.execute| if no range selected.
Calling `:Yeet` for visual selection will pass range to |yeet.execute_selection|.

==============================================================================
API                                                                       *yeet*

Use these calls with your preferred keymaps.

M.select_target({callback?})                                *yeet.select_target*
    Fetch available term buffers and tmux panes. Open prompt for target selection.
    If callback given, it is called after target selection without any arguments.
    Callback is used internally to chain api calls, so it can be ignored.

    Parameters: ~
        {callback?}  (fun())


M.execute({cmd?}, {opts?})                                        *yeet.execute*
    Send given command to selected target.

    Flow:
         1. If no command given or previously selected, opens prompt
         2. If no target previously selected, opens prompt
         3. Sends command to target

    If command or target needs to be changed from what was given in the first
    call of this function, use |yeet.select_target| for target and
    |yeet.set_cmd| or |yeet.list_cmd| for command.

    Prefix command with `C-c` to send interrupt before entering command.
    Prefix command with `init:` to run command only if target is newly created
    from target selection prompt.

    Options given are used for only this invocation, options registered
    in setup are not modified permanently.

    Parameters: ~
        {cmd?}   (string)
        {opts?}  (Options)

    Usage: ~
>lua
        require("yeet").execute()
        require("yeet").execute("echo hello world")
        require("yeet").execute(nil, { clear_before_yeet = false })
        -- send interrupt before execution, local for this command
        require("yeet").execute("C-c python run_server.py")
        -- use option version for interrupt for any command
        require("yeet").execute(nil, { interrupt_before_yeet = true })
<


M.toggle_post_write()                                   *yeet.toggle_post_write*
    Toggle autoyeeting, calls |yeet.execute| on |BufWritePost|.


M.set_cmd({cmd?}, {callback?})                                    *yeet.set_cmd*
    Prompts for command. Sets in-memory command which will be used for following
    calls for |yeet.execute|. Callback is called after setting the command.

    Parameters: ~
        {cmd?}       (string)
        {callback?}  (fun())

    Usage: ~
>lua
        require("yeet").set_cmd()
        require("yeet").set_cmd("echo hello world")
        require("yeet").set_cmd(nil, require("yeet").execute)
<


M.list_cmd({filepath?})                                          *yeet.list_cmd*
    List commands stored in cache file. File will be opened to a new window with
    configuration defined in setup options. Optional filepath can be given to
    bypass what was given in setup.

    Commands prefixed with `init:` are considered init commands and are
    executed automatically when target is new, before the actual command.

    Example cache:

         init: echo "init command"
         init: echo "init command2"
         echo "main command"

    Remaps:
       Normal mode:
         <CR> -> Calls |yeet.execute| with current line as command.

       Visual mode:
         <CR> -> Calls |yeet.execute| with visual-line selection as
                 command. Same behaviour as |yeet.execute_selection|.

    Parameters: ~
        {filepath?}  (string)

    Usage: ~
>lua
        require("yeet").list_cmd()
        require("yeet").list_cmd(".yeet")
        require("yeet").list_cmd("~/some/dir/commands.txt")
<


M.execute_selection({opts?})                            *yeet.execute_selection*
    Grab current or last visual selection and call |yeet.execute| with
    provided options.

    Does not support partial ranges, uses all the lines that are in the scope
    of the selection. Removes empty lines and indent common to all lines, making
    it behave nice when sending code snippets to a repl.

    Parameters: ~
        {opts?}  (Options)


M.setqflist({opts?})                                            *yeet.setqflist*
    Parse output of last yeet with current |errorformat|.
    Accepts a table with two keys:

       open      (boolean)   Open quickfixlist (default: false)
       errorfile (string)    Temporary file for saving output (default: /tmp/yeeterr)

    Parameters: ~
        {opts?}  (table)


==============================================================================
CONF                                                                 *yeet-conf*

Config                                                        *yeet-conf.Config*

    Fields: ~
        {yeet_and_run}                  (boolean)
        {interrupt_before_yeet}         (boolean)
        {clear_before_yeet}             (boolean)
        {notify_on_success}             (boolean)
        {warn_tmux_not_running}         (boolean)
        {hide_term_buffers}             (boolean)
        {retry_last_target_on_failure}  (boolean)
        {tmux_split_pane_command}       (string)
        {use_cache_file}                (boolean)
        {cache}                         (fun():string)
        {cache_window_opts}             (vim.api.keyset.win_config|fun():vim.api.keyset.win_config)


C.git_root({fallback?})                                     *yeet-conf.git_root*
    Resolve filename for cache.
    Fallback is used if not a git project, if no fallback given,
    calls |yeet-conf.cachepath|.

    Parameters: ~
        {fallback?}  (string)

    Returns: ~
        (string)

    Usage: ~
>lua
        require("yeet").setup({
            cache = require("yeet.conf").git_root
        })
<


C.cachepath({root?})                                       *yeet-conf.cachepath*
    Resolve filename for cache.
    Default root is `stdpath("cache") / yeet`, filename is generated
    from cwd.

    Parameters: ~
        {root?}  (string)

    Returns: ~
        (string)

    Usage: ~
>lua
        --Keep the builtin naming scheme for cache files, but in
        --a different location:
        require("yeet").setup({
            cache = function()
                return require("yeet.conf").cachepath("~/some/dir")
            end,
        })
<


C.defaults                                                          *C.defaults*
    Default configuration.

    Type: ~
        (Config)


vim:tw=78:ts=8:noet:ft=help:norl:
